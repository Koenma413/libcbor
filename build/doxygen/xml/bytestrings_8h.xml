<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="bytestrings_8h" kind="file">
    <compoundname>bytestrings.h</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includedby refid="bytestrings_8c" local="yes">src/cbor/bytestrings.c</includedby>
    <includedby refid="common_8c" local="yes">src/cbor/common.c</includedby>
    <includedby refid="builder__callbacks_8c" local="yes">src/cbor/internal/builder_callbacks.c</includedby>
    <includedby refid="serialization_8c" local="yes">src/cbor/serialization.c</includedby>
    <includedby refid="cbor_8h" local="yes">src/cbor.h</includedby>
    <incdepgraph>
      <node id="98">
        <label>stdbool.h</label>
      </node>
      <node id="99">
        <label>assert.h</label>
      </node>
      <node id="97">
        <label>stdint.h</label>
      </node>
      <node id="95">
        <label>stdlib.h</label>
      </node>
      <node id="94">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>stddef.h</label>
      </node>
      <node id="100">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>src/cbor/bytestrings.h</label>
        <link refid="bytestrings.h"/>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="103">
        <label>src/cbor/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="107">
        <label>src/cbor.c</label>
        <link refid="cbor_8c"/>
      </node>
      <node id="106">
        <label>src/cbor.h</label>
        <link refid="cbor_8h"/>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>src/cbor/internal/builder_callbacks.c</label>
        <link refid="builder__callbacks_8c"/>
      </node>
      <node id="102">
        <label>src/cbor/bytestrings.c</label>
        <link refid="bytestrings_8c"/>
      </node>
      <node id="101">
        <label>src/cbor/bytestrings.h</label>
        <link refid="bytestrings.h"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>src/cbor/serialization.c</label>
        <link refid="serialization_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="bytestrings_8h_1a7c15a63fdc3830707eac0877a261f1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_bytestring_length</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_length</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns the length of the binary data. </para>        </briefdescription>
        <detaileddescription>
<para>For definite byte strings only</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a definite bytestring </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the binary data. Zero if no chunk has been attached yet </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="30" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a368222dbbcea25e06469524e26587e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_bytestring_is_definite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_is_definite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the byte string definite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the byte string definite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="37" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a3a6c450f105bb18b6b56d20f0de4786a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_bytestring_is_indefinite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_is_indefinite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the byte string indefinite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the byte string indefinite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="44" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a05c09e147b0a244abc481b0b078ebcb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref></type>
        <definition>cbor_mutable_data cbor_bytestring_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the handle to the binary data. </para>        </briefdescription>
        <detaileddescription>
<para>Definite items only. Modifying the data is allowed. In that case, the caller takes responsibility for the effect on items this item might be a part of</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The address of the binary data. <computeroutput>NULL</computeroutput> if no data have been assigned yet. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="54" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a94278dc5a388031c2805835aef005579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_bytestring_set_handle</definition>
        <argsstring>(cbor_item_t *item, cbor_mutable_data restrict data, size_t length)</argsstring>
        <name>cbor_bytestring_set_handle</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref> restrict</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the handle to the binary data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite byte string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory block. The caller gives up the ownership of the block. libcbor will deallocate it when appropriate using its free function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="62" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a8ab6255d6f8f209149bdf794dffed849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> **</type>
        <definition>cbor_item_t** cbor_bytestring_chunks_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_chunks_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the handle to the array of chunks. </para>        </briefdescription>
        <detaileddescription>
<para>Manipulations with the memory block (e.g. sorting it) are allowed, but the validity and the number of chunks must be retained.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A indefinite byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>array of <ref refid="bytestrings_8h_1ad02102832d452fd5a5cfa96272b1095d" kindref="member">cbor_bytestring_chunk_count</ref> definite bytestrings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="71" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1ad02102832d452fd5a5cfa96272b1095d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_bytestring_chunk_count</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_chunk_count</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the number of chunks this string consist of. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A indefinite bytestring </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The chunk count. 0 for freshly created items. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="78" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a5dc8c27d6e7acfdd05fdc15c01e25b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_bytestring_add_chunk</definition>
        <argsstring>(cbor_item_t *item, cbor_item_t *chunk)</argsstring>
        <name>cbor_bytestring_add_chunk</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
<para>Appends a chunk to the bytestring. </para>        </briefdescription>
        <detaileddescription>
<para>Indefinite byte strings only.</para><para>May realloc the chunk storage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An indefinite byte string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on realloc failure. In that case, the refcount of <computeroutput>chunk</computeroutput> is not increased and the <computeroutput>item</computeroutput> is left intact. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="90" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="94" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a86fc646f4520b90c85a704d27b46e69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_definite_bytestring</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_definite_bytestring</name>
        <briefdescription>
<para>Creates a new definite byte string. </para>        </briefdescription>
        <detaileddescription>
<para>The handle is initialized to <computeroutput>NULL</computeroutput> and length to 0</para><para><simplesect kind="return"><para><bold>new</bold> definite bytestring. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="98" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="34" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1a6de9d6387e856c33d2ef8e8e9fdac0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_indefinite_bytestring</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_indefinite_bytestring</name>
        <briefdescription>
<para>Creates a new indefinite byte string. </para>        </briefdescription>
        <detaileddescription>
<para>The chunks array is initialized to <computeroutput>NULL</computeroutput> and chunkcount to 0</para><para><simplesect kind="return"><para><bold>new</bold> indefinite bytestring. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="106" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="45" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8h_1ab76bd5ff62831739cd9a8d7ec2768c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_bytestring</definition>
        <argsstring>(cbor_data handle, size_t length)</argsstring>
        <name>cbor_build_bytestring</name>
        <param>
          <type><ref refid="data_8h_1a121c5944682215e742475f12f07c0a72" kindref="member">cbor_data</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Creates a new byte string and initializes it. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>handle</computeroutput> will be copied to a newly allocated block</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of binary data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>data</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <bold>new</bold> byte string with content <computeroutput>handle</computeroutput>. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h" line="116" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="62" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pavel<sp/>Kalvoda<sp/>&lt;me@pavelkalvoda.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libcbor<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBCBOR_BYTESTRINGS_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LIBCBOR_BYTESTRINGS_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>============================================================================</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>Byte<sp/>string<sp/>manipulation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>============================================================================</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8h_1a7c15a63fdc3830707eac0877a261f1cd" kindref="member">cbor_bytestring_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8h_1a368222dbbcea25e06469524e26587e2a" kindref="member">cbor_bytestring_is_definite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8h_1a3a6c450f105bb18b6b56d20f0de4786a" kindref="member">cbor_bytestring_is_indefinite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref><sp/><ref refid="bytestrings_8h_1a05c09e147b0a244abc481b0b078ebcb9" kindref="member">cbor_bytestring_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8h_1a94278dc5a388031c2805835aef005579" kindref="member">cbor_bytestring_set_handle</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref><sp/>restrict<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**<ref refid="bytestrings_8h_1a8ab6255d6f8f209149bdf794dffed849" kindref="member">cbor_bytestring_chunks_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8h_1ad02102832d452fd5a5cfa96272b1095d" kindref="member">cbor_bytestring_chunk_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8h_1a5dc8c27d6e7acfdd05fdc15c01e25b47" kindref="member">cbor_bytestring_add_chunk</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*chunk);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="bytestrings_8h_1a86fc646f4520b90c85a704d27b46e69e" kindref="member">cbor_new_definite_bytestring</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="bytestrings_8h_1a6de9d6387e856c33d2ef8e8e9fdac0ac" kindref="member">cbor_new_indefinite_bytestring</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="bytestrings_8h_1ab76bd5ff62831739cd9a8d7ec2768c1a" kindref="member">cbor_build_bytestring</ref>(<ref refid="data_8h_1a121c5944682215e742475f12f07c0a72" kindref="member">cbor_data</ref><sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LIBCBOR_BYTESTRINGS_H</highlight></codeline>
    </programlisting>
    <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.h"/>
  </compounddef>
</doxygen>
