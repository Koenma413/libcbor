<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="ints_8c" kind="file">
    <compoundname>ints.c</compoundname>
    <includes refid="ints_8h" local="yes">ints.h</includes>
    <incdepgraph>
      <node id="415">
        <label>stdbool.h</label>
      </node>
      <node id="416">
        <label>assert.h</label>
      </node>
      <node id="414">
        <label>stdint.h</label>
      </node>
      <node id="412">
        <label>stdlib.h</label>
      </node>
      <node id="409">
        <label>src/cbor/ints.c</label>
        <link refid="ints.c"/>
        <childnode refid="410" relation="include">
        </childnode>
      </node>
      <node id="410">
        <label>ints.h</label>
        <link refid="ints_8h"/>
        <childnode refid="411" relation="include">
        </childnode>
      </node>
      <node id="411">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
      </node>
      <node id="413">
        <label>stddef.h</label>
      </node>
      <node id="417">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57" kindref="member">cbor_int_width</ref></type>
        <definition>cbor_int_width cbor_int_get_width</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_int_get_width</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Queries the integer width. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="10" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a2379bf36318e8e4faa7434c74d8553fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t cbor_get_uint8</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_get_uint8</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Extracts the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="16" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a06a0997aed16fe6aa540f57bf40ce400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t cbor_get_uint16</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_get_uint16</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Extracts the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="23" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a0480e5b5849b757aa9416a4c1d51b36d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t cbor_get_uint32</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_get_uint32</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Extracts the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="30" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a839ec2dc97dda1db54657cec50387a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t cbor_get_uint64</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_get_uint64</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Extracts the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="37" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1aacf93e9a8a2c4217d5cd84207b957cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t cbor_get_int</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_get_int</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Extracts the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value, extended to <computeroutput>uint64_t</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="44" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="44" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a62e9cd557438c1a5b8cf9a29c1f64baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_set_uint8</definition>
        <argsstring>(cbor_item_t *item, uint8_t value)</argsstring>
        <name>cbor_set_uint8</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Assigns the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to assign. For negative integer, the logical value is <computeroutput>-value - 1</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="56" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a13b3dff419830b59c77ee18d4c03f6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_set_uint16</definition>
        <argsstring>(cbor_item_t *item, uint16_t value)</argsstring>
        <name>cbor_set_uint16</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Assigns the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to assign. For negative integer, the logical value is <computeroutput>-value - 1</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="63" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a2db697fb733dcbdbbef8714fd182a185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_set_uint32</definition>
        <argsstring>(cbor_item_t *item, uint32_t value)</argsstring>
        <name>cbor_set_uint32</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Assigns the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to assign. For negative integer, the logical value is <computeroutput>-value - 1</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="71" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1af82a3961109f2a36324157e218680016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_set_uint64</definition>
        <argsstring>(cbor_item_t *item, uint64_t value)</argsstring>
        <name>cbor_set_uint64</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Assigns the integer value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to assign. For negative integer, the logical value is <computeroutput>-value - 1</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="78" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1aed6a5a44245b8447a768c95e351c2c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_mark_uint</definition>
        <argsstring>(cbor_item_t *item)</argsstring>
        <name>cbor_mark_uint</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Marks the integer item as a positive integer. </para>        </briefdescription>
        <detaileddescription>
<para>The data value is not changed</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer item </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="85" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a6ef24d3e2636c02de092fdfc337276b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_mark_negint</definition>
        <argsstring>(cbor_item_t *item)</argsstring>
        <name>cbor_mark_negint</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Marks the integer item as a negative integer. </para>        </briefdescription>
        <detaileddescription>
<para>The data value is not changed</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>positive or negative integer item </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="91" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1ae4562e1314b122ae89712dbf0c48c14c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_int8</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_int8</name>
        <briefdescription>
<para>Allocates new integer with 1B width. </para>        </briefdescription>
        <detaileddescription>
<para>The width cannot be changed once allocated</para><para><simplesect kind="return"><para><bold>new</bold> positive integer. The value is not initialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="97" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a68f71f9574e0085f02a27bd0f58d4b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_int16</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_int16</name>
        <briefdescription>
<para>Allocates new integer with 2B width. </para>        </briefdescription>
        <detaileddescription>
<para>The width cannot be changed once allocated</para><para><simplesect kind="return"><para><bold>new</bold> positive integer. The value is not initialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="109" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="109" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a9cf9db24315a0e622746a546cc112467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_int32</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_int32</name>
        <briefdescription>
<para>Allocates new integer with 4B width. </para>        </briefdescription>
        <detaileddescription>
<para>The width cannot be changed once allocated</para><para><simplesect kind="return"><para><bold>new</bold> positive integer. The value is not initialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="121" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="121" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1ab863f47b9de930c5d014e0dbb5523d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_int64</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_int64</name>
        <briefdescription>
<para>Allocates new integer with 8B width. </para>        </briefdescription>
        <detaileddescription>
<para>The width cannot be changed once allocated</para><para><simplesect kind="return"><para><bold>new</bold> positive integer. The value is not initialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="133" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1ad4d9f92f14c640544386e6655283052d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_uint8</definition>
        <argsstring>(uint8_t value)</argsstring>
        <name>cbor_build_uint8</name>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new positive integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> positive integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="145" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="145" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a88f05c625ad9fa182bc95c9c97f87dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_uint16</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>cbor_build_uint16</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new positive integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> positive integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="153" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="153" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1afcefa3190eeeff1e5ed0b5217761ad5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_uint32</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>cbor_build_uint32</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new positive integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> positive integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="161" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1adff4351ebc5bb6f69d8a2ea0c9439fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_uint64</definition>
        <argsstring>(uint64_t value)</argsstring>
        <name>cbor_build_uint64</name>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new positive integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> positive integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="169" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="169" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a28553eb079f8778babebf869e33f27a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_negint8</definition>
        <argsstring>(uint8_t value)</argsstring>
        <name>cbor_build_negint8</name>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new negative integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> negative integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="177" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="177" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1ae40a5af0998889c6550ceb0914b2cd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_negint16</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>cbor_build_negint16</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new negative integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> negative integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="185" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="185" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1a35d8b500ae33d4fc0262de4830382529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_negint32</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>cbor_build_negint32</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new negative integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> negative integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="193" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="ints_8c_1ae24074614ece5da3024a536093d21678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_negint64</definition>
        <argsstring>(uint64_t value)</argsstring>
        <name>cbor_build_negint64</name>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Constructs a new negative integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> negative integer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/ints.c" line="201" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/ints.c" bodystart="201" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pavel<sp/>Kalvoda<sp/>&lt;me@pavelkalvoda.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libcbor<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ints_8h" kindref="compound">ints.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="ints_8h_1a30bcfb58aa41d4c44bc2d5d6b7de105d" refkind="member"><highlight class="normal"><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57" kindref="member">cbor_int_width</ref><sp/><ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a7d97fa5cdf027ca0499c37ec19acf843" kindref="member">metadata</ref>.<ref refid="unioncbor__item__metadata_1a9dbedd1621e78d4817c359849ffd75a9" kindref="member">int_metadata</ref>.<ref refid="struct__cbor__int__metadata_1a7a402d748e607c9942e5eefdb875582d" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="ints_8h_1a2379bf36318e8e4faa7434c74d8553fb" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="ints_8c_1a2379bf36318e8e4faa7434c74d8553fb" kindref="member">cbor_get_uint8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aaa167d7a4fac34f2bae123761b4b6fc8" kindref="member">CBOR_INT_8</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="ints_8h_1a06a0997aed16fe6aa540f57bf40ce400" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="ints_8c_1a06a0997aed16fe6aa540f57bf40ce400" kindref="member">cbor_get_uint16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57a3a9caf604c45ce423b332e91f7370822" kindref="member">CBOR_INT_16</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(uint16_t<sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="ints_8h_1a0480e5b5849b757aa9416a4c1d51b36d" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="ints_8c_1a0480e5b5849b757aa9416a4c1d51b36d" kindref="member">cbor_get_uint32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57ad429fc90ccfb94ec85996920fe115b51" kindref="member">CBOR_INT_32</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(uint32_t<sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="ints_8h_1a839ec2dc97dda1db54657cec50387a12" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="ints_8c_1a839ec2dc97dda1db54657cec50387a12" kindref="member">cbor_get_uint64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aafaef7945451a7f4d12298f12f8acb2d" kindref="member">CBOR_INT_64</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(uint64_t<sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="ints_8h_1aacf93e9a8a2c4217d5cd84207b957cba" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="ints_8c_1aacf93e9a8a2c4217d5cd84207b957cba" kindref="member">cbor_get_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item))<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aaa167d7a4fac34f2bae123761b4b6fc8" kindref="member">CBOR_INT_8</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a2379bf36318e8e4faa7434c74d8553fb" kindref="member">cbor_get_uint8</ref>(item);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57a3a9caf604c45ce423b332e91f7370822" kindref="member">CBOR_INT_16</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a06a0997aed16fe6aa540f57bf40ce400" kindref="member">cbor_get_uint16</ref>(item);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57ad429fc90ccfb94ec85996920fe115b51" kindref="member">CBOR_INT_32</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a0480e5b5849b757aa9416a4c1d51b36d" kindref="member">cbor_get_uint32</ref>(item);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aafaef7945451a7f4d12298f12f8acb2d" kindref="member">CBOR_INT_64</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a839ec2dc97dda1db54657cec50387a12" kindref="member">cbor_get_uint64</ref>(item);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xDEADBEEF;<sp/></highlight><highlight class="comment">/*<sp/>Compiler<sp/>complaints<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="ints_8h_1a62e9cd557438c1a5b8cf9a29c1f64baa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a62e9cd557438c1a5b8cf9a29c1f64baa" kindref="member">cbor_set_uint8</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/>uint8_t<sp/>value)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aaa167d7a4fac34f2bae123761b4b6fc8" kindref="member">CBOR_INT_8</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>*item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="ints_8h_1a13b3dff419830b59c77ee18d4c03f6eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a13b3dff419830b59c77ee18d4c03f6eb" kindref="member">cbor_set_uint16</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/>uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57a3a9caf604c45ce423b332e91f7370822" kindref="member">CBOR_INT_16</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>*(uint16_t<sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="ints_8h_1a2db697fb733dcbdbbef8714fd182a185" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a2db697fb733dcbdbbef8714fd182a185" kindref="member">cbor_set_uint32</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57ad429fc90ccfb94ec85996920fe115b51" kindref="member">CBOR_INT_32</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>*(uint32_t<sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="ints_8h_1af82a3961109f2a36324157e218680016" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1af82a3961109f2a36324157e218680016" kindref="member">cbor_set_uint64</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/>uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="ints_8c_1a30bcfb58aa41d4c44bc2d5d6b7de105d" kindref="member">cbor_int_get_width</ref>(item)<sp/>==<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aafaef7945451a7f4d12298f12f8acb2d" kindref="member">CBOR_INT_64</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>*(uint64_t<sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="ints_8h_1aed6a5a44245b8447a768c95e351c2c0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1aed6a5a44245b8447a768c95e351c2c0c" kindref="member">cbor_mark_uint</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="ints_8h_1a6ef24d3e2636c02de092fdfc337276b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ints_8c_1a6ef24d3e2636c02de092fdfc337276b1" kindref="member">cbor_mark_negint</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(item));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae140516103af792c8f2af84390acfdcd" kindref="member">CBOR_TYPE_NEGINT</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="ints_8h_1ae4562e1314b122ae89712dbf0c48c14c" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1ae4562e1314b122ae89712dbf0c48c14c" kindref="member">cbor_new_int8</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>*item<sp/>=<sp/>(<ref refid="data_8h_1afdaa4bcbbdd295d719e39ce0b5519419" kindref="member">cbor_item_t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.metadata<sp/>=<sp/>{.int_metadata<sp/>=<sp/>{.width<sp/>=<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aaa167d7a4fac34f2bae123761b4b6fc8" kindref="member">CBOR_INT_8</ref>}},</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="ints_8h_1a68f71f9574e0085f02a27bd0f58d4b55" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1a68f71f9574e0085f02a27bd0f58d4b55" kindref="member">cbor_new_int16</ref>()</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>*item<sp/>=<sp/>(<ref refid="data_8h_1afdaa4bcbbdd295d719e39ce0b5519419" kindref="member">cbor_item_t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.metadata<sp/>=<sp/>{.int_metadata<sp/>=<sp/>{.width<sp/>=<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57a3a9caf604c45ce423b332e91f7370822" kindref="member">CBOR_INT_16</ref>}},</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="ints_8h_1a9cf9db24315a0e622746a546cc112467" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1a9cf9db24315a0e622746a546cc112467" kindref="member">cbor_new_int32</ref>()</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>)<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>*item<sp/>=<sp/>(<ref refid="data_8h_1afdaa4bcbbdd295d719e39ce0b5519419" kindref="member">cbor_item_t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.metadata<sp/>=<sp/>{.int_metadata<sp/>=<sp/>{.width<sp/>=<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57ad429fc90ccfb94ec85996920fe115b51" kindref="member">CBOR_INT_32</ref>}},</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="ints_8h_1ab863f47b9de930c5d014e0dbb5523d9d" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1ab863f47b9de930c5d014e0dbb5523d9d" kindref="member">cbor_new_int64</ref>()</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>)<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>*item<sp/>=<sp/>(<ref refid="data_8h_1afdaa4bcbbdd295d719e39ce0b5519419" kindref="member">cbor_item_t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>item<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.metadata<sp/>=<sp/>{.int_metadata<sp/>=<sp/>{.width<sp/>=<sp/><ref refid="data_8h_1ae0fc9740f108f0f0078b93712b061e57aafaef7945451a7f4d12298f12f8acb2d" kindref="member">CBOR_INT_64</ref>}},</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="ints_8h_1ad4d9f92f14c640544386e6655283052d" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1ad4d9f92f14c640544386e6655283052d" kindref="member">cbor_build_uint8</ref>(uint8_t<sp/>value)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1ae4562e1314b122ae89712dbf0c48c14c" kindref="member">cbor_new_int8</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a62e9cd557438c1a5b8cf9a29c1f64baa" kindref="member">cbor_set_uint8</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1aed6a5a44245b8447a768c95e351c2c0c" kindref="member">cbor_mark_uint</ref>(item);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="ints_8h_1a88f05c625ad9fa182bc95c9c97f87dda" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1a88f05c625ad9fa182bc95c9c97f87dda" kindref="member">cbor_build_uint16</ref>(uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1a68f71f9574e0085f02a27bd0f58d4b55" kindref="member">cbor_new_int16</ref>();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a13b3dff419830b59c77ee18d4c03f6eb" kindref="member">cbor_set_uint16</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1aed6a5a44245b8447a768c95e351c2c0c" kindref="member">cbor_mark_uint</ref>(item);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="ints_8h_1afcefa3190eeeff1e5ed0b5217761ad5a" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1afcefa3190eeeff1e5ed0b5217761ad5a" kindref="member">cbor_build_uint32</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1a9cf9db24315a0e622746a546cc112467" kindref="member">cbor_new_int32</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a2db697fb733dcbdbbef8714fd182a185" kindref="member">cbor_set_uint32</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1aed6a5a44245b8447a768c95e351c2c0c" kindref="member">cbor_mark_uint</ref>(item);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="ints_8h_1adff4351ebc5bb6f69d8a2ea0c9439fc5" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1adff4351ebc5bb6f69d8a2ea0c9439fc5" kindref="member">cbor_build_uint64</ref>(uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1ab863f47b9de930c5d014e0dbb5523d9d" kindref="member">cbor_new_int64</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1af82a3961109f2a36324157e218680016" kindref="member">cbor_set_uint64</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1aed6a5a44245b8447a768c95e351c2c0c" kindref="member">cbor_mark_uint</ref>(item);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="ints_8h_1a28553eb079f8778babebf869e33f27a2" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1a28553eb079f8778babebf869e33f27a2" kindref="member">cbor_build_negint8</ref>(uint8_t<sp/>value)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1ae4562e1314b122ae89712dbf0c48c14c" kindref="member">cbor_new_int8</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a62e9cd557438c1a5b8cf9a29c1f64baa" kindref="member">cbor_set_uint8</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a6ef24d3e2636c02de092fdfc337276b1" kindref="member">cbor_mark_negint</ref>(item);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="ints_8h_1ae40a5af0998889c6550ceb0914b2cd9b" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1ae40a5af0998889c6550ceb0914b2cd9b" kindref="member">cbor_build_negint16</ref>(uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1a68f71f9574e0085f02a27bd0f58d4b55" kindref="member">cbor_new_int16</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a13b3dff419830b59c77ee18d4c03f6eb" kindref="member">cbor_set_uint16</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a6ef24d3e2636c02de092fdfc337276b1" kindref="member">cbor_mark_negint</ref>(item);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="ints_8h_1a35d8b500ae33d4fc0262de4830382529" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1a35d8b500ae33d4fc0262de4830382529" kindref="member">cbor_build_negint32</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1a9cf9db24315a0e622746a546cc112467" kindref="member">cbor_new_int32</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a2db697fb733dcbdbbef8714fd182a185" kindref="member">cbor_set_uint32</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a6ef24d3e2636c02de092fdfc337276b1" kindref="member">cbor_mark_negint</ref>(item);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="ints_8h_1ae24074614ece5da3024a536093d21678" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="ints_8c_1ae24074614ece5da3024a536093d21678" kindref="member">cbor_build_negint64</ref>(uint64_t<sp/>value)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="ints_8c_1ab863f47b9de930c5d014e0dbb5523d9d" kindref="member">cbor_new_int64</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1af82a3961109f2a36324157e218680016" kindref="member">cbor_set_uint64</ref>(item,<sp/>value);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ints_8c_1a6ef24d3e2636c02de092fdfc337276b1" kindref="member">cbor_mark_negint</ref>(item);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pjk/project/libcbor/src/cbor/ints.c"/>
  </compounddef>
</doxygen>
