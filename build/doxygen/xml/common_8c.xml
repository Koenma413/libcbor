<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="common_8c" kind="file">
    <compoundname>common.c</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="arrays_8h" local="yes">arrays.h</includes>
    <includes refid="bytestrings_8h" local="yes">bytestrings.h</includes>
    <includes refid="data_8h" local="yes">data.h</includes>
    <includes refid="floats__ctrls_8h" local="yes">floats_ctrls.h</includes>
    <includes refid="ints_8h" local="yes">ints.h</includes>
    <includes refid="maps_8h" local="yes">maps.h</includes>
    <includes refid="strings_8h" local="yes">strings.h</includes>
    <includes refid="tags_8h" local="yes">tags.h</includes>
    <incdepgraph>
      <node id="139">
        <label>stdbool.h</label>
      </node>
      <node id="140">
        <label>assert.h</label>
      </node>
      <node id="138">
        <label>stdint.h</label>
      </node>
      <node id="136">
        <label>stdlib.h</label>
      </node>
      <node id="145">
        <label>ints.h</label>
        <link refid="ints_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="148">
        <label>tags.h</label>
        <link refid="tags_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>src/cbor/common.c</label>
        <link refid="common.c"/>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>strings.h</label>
        <link refid="strings_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>stddef.h</label>
      </node>
      <node id="142">
        <label>arrays.h</label>
        <link refid="arrays_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="146">
        <label>maps.h</label>
        <link refid="maps_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>bytestrings.h</label>
        <link refid="bytestrings_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="144">
        <label>floats_ctrls.h</label>
        <link refid="floats__ctrls_8h"/>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="common_8c_1a682a023f7012a5b66a57847e6f8d386f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_uint</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_uint</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item an <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="18" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a0ca5042e3807d2cc9c3d40f9266460dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_negint</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_negint</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae140516103af792c8f2af84390acfdcd" kindref="member">CBOR_TYPE_NEGINT</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="23" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1adedaf37527b8d8261e287a0001e5a190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_bytestring</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_bytestring</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a70b9f0b5958c8d51f15ad7bb7c4af01d" kindref="member">CBOR_TYPE_BYTESTRING</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="28" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a02edd93bb8eab83bc2b8f8bf5d7d1335" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_string</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_string</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae05102a66420250eacd5f17b95d04443" kindref="member">CBOR_TYPE_STRING</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="33" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a9ed0fa96105c211867c5032f2a5a8b20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_array</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_array</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item an <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae48b04b3538ade49d7eae9ee6b656103" kindref="member">CBOR_TYPE_ARRAY</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="38" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1af0de041481b61922d0995b63f82d8ddd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_map</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_map</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a057fc3133cb4465f9eb734acfd195db2" kindref="member">CBOR_TYPE_MAP</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="43" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a0d5054202c5ec9375e8daf5930087a61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_tag</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_tag</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a16f0eaf29eeea66fe37ec1ed0fa45415" kindref="member">CBOR_TYPE_TAG</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="48" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a983dec76e934c49ed6979226f9db4386" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_isa_float_ctrl</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_isa_float_ctrl</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does the item have the appropriate major type? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a <ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a1276dcc4ac56df5fd7e0270344a6e57d" kindref="member">CBOR_TYPE_FLOAT_CTRL</ref>? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="53" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1ac2b9aba4cf07857524a0a520eabeef52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6" kindref="member">cbor_type</ref></type>
        <definition>cbor_type cbor_typeof</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_typeof</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the type of the item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="59" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_is_int</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_is_int</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the item an integer, either positive or negative? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item an integer, either positive or negative? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="65" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a5618a3689e31829f4f84da008e20798e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_is_bool</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_is_bool</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the item an a boolean? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a boolean? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="71" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1ad1f5efac647b4d9c437c4441d1177e01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_is_null</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_is_null</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does this item represent <computeroutput>null</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-asterisk
* .. warning:: This is in no way related to the value of the pointer. Passing a null pointer will most likely result in a crash.
* </verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item (CBOR logical) null? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="77" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1afb7eb76a2953224c96d194640f3092e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_is_undef</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_is_undef</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Does this item represent <computeroutput>undefined</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-asterisk
* .. warning:: Care must be taken to distinguish nulls and undefined values in C.
* </verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item (CBOR logical) undefined? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="82" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a4dde28c548375aa954f1cad15b3739aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_is_float</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_is_float</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the item an a floating point number? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the item a floating point number? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="87" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1aa62e72f275c2f0fa604896bfed18e992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_incref</definition>
        <argsstring>(cbor_item_t *item)</argsstring>
        <name>cbor_incref</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Increases the reference count by one. </para>        </briefdescription>
        <detaileddescription>
<para>No dependent items are affected.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>item the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input reference </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="93" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1aedbe700f2241de4282aedaae017e0de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_decref</definition>
        <argsstring>(cbor_item_t **item_ref)</argsstring>
        <name>cbor_decref</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> **</type>
          <declname>item</declname>
          <defname>item_ref</defname>
        </param>
        <briefdescription>
<para>Decreases the reference count by one, deallocating the item if needed. </para>        </briefdescription>
        <detaileddescription>
<para>In case the item is deallocated, the reference count of any dependent items is adjusted accordingly in a recursive manner.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[take]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item. Set to <computeroutput>NULL</computeroutput> if deallocated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="99" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="99" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a4ed20937cc091bc1f481d53787fe306b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_intermediate_decref</definition>
        <argsstring>(cbor_item_t *item)</argsstring>
        <name>cbor_intermediate_decref</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Decreases the reference count by one, deallocating the item if needed. </para>        </briefdescription>
        <detaileddescription>
<para>Convenience wrapper for <ref refid="common_8h_1aa10ebec46eddc9312ec46a0898b5d196" kindref="member">cbor_decref</ref> when its set-to-null behavior is not needed</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[take]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="174" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1ab27dda20ad909cebaee1b2f43e676f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_refcount</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_refcount</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the reference count. </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-asterisk
* .. warning:: This does *not* account for transitive references.
* </verbatim></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the reference count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="179" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a327dce45c1cb680953555290dba8e35b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_move</definition>
        <argsstring>(cbor_item_t *item)</argsstring>
        <name>cbor_move</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Provide CPP-like move construct. </para>        </briefdescription>
        <detaileddescription>
<para>Decreases the reference count by one, but does not deallocate the item even if it reach zero. This is useful for passing intermediate values to functions that increase reference count, Should only be used with functions that <computeroutput>incref</computeroutput> their arguments. <verbatim>embed:rst:leading-asterisk
* .. warning:: If the item is moved without correctly increasing the reference count afterwards, the memory will be leaked.
* </verbatim></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[take]</parametername>
</parameternamelist>
<parameterdescription>
<para>the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the item with reference count decreased by one </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/common.c" line="184" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/common.c" bodystart="184" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pavel<sp/>Kalvoda<sp/>&lt;me@pavelkalvoda.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libcbor<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrays_8h" kindref="compound">arrays.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bytestrings_8h" kindref="compound">bytestrings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data_8h" kindref="compound">data.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="floats__ctrls_8h" kindref="compound">floats_ctrls.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ints_8h" kindref="compound">ints.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="maps_8h" kindref="compound">maps.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="strings_8h" kindref="compound">strings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tags_8h" kindref="compound">tags.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="common_8h_1a682a023f7012a5b66a57847e6f8d386f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a682a023f7012a5b66a57847e6f8d386f" kindref="member">cbor_isa_uint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="common_8h_1a0ca5042e3807d2cc9c3d40f9266460dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a0ca5042e3807d2cc9c3d40f9266460dd" kindref="member">cbor_isa_negint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae140516103af792c8f2af84390acfdcd" kindref="member">CBOR_TYPE_NEGINT</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="common_8h_1adedaf37527b8d8261e287a0001e5a190" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a70b9f0b5958c8d51f15ad7bb7c4af01d" kindref="member">CBOR_TYPE_BYTESTRING</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="common_8h_1a02edd93bb8eab83bc2b8f8bf5d7d1335" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a02edd93bb8eab83bc2b8f8bf5d7d1335" kindref="member">cbor_isa_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae05102a66420250eacd5f17b95d04443" kindref="member">CBOR_TYPE_STRING</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="common_8h_1a9ed0fa96105c211867c5032f2a5a8b20" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a9ed0fa96105c211867c5032f2a5a8b20" kindref="member">cbor_isa_array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae48b04b3538ade49d7eae9ee6b656103" kindref="member">CBOR_TYPE_ARRAY</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="common_8h_1af0de041481b61922d0995b63f82d8ddd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1af0de041481b61922d0995b63f82d8ddd" kindref="member">cbor_isa_map</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a057fc3133cb4465f9eb734acfd195db2" kindref="member">CBOR_TYPE_MAP</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="common_8h_1a0d5054202c5ec9375e8daf5930087a61" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a0d5054202c5ec9375e8daf5930087a61" kindref="member">cbor_isa_tag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a16f0eaf29eeea66fe37ec1ed0fa45415" kindref="member">CBOR_TYPE_TAG</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="common_8h_1a983dec76e934c49ed6979226f9db4386" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a983dec76e934c49ed6979226f9db4386" kindref="member">cbor_isa_float_ctrl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a1276dcc4ac56df5fd7e0270344a6e57d" kindref="member">CBOR_TYPE_FLOAT_CTRL</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="common_8h_1ac2b9aba4cf07857524a0a520eabeef52" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6" kindref="member">cbor_type</ref><sp/><ref refid="common_8c_1ac2b9aba4cf07857524a0a520eabeef52" kindref="member">cbor_typeof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="common_8h_1a4e705f34221ba434756a4a1f8e3325e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a4e705f34221ba434756a4a1f8e3325e6" kindref="member">cbor_is_int</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a682a023f7012a5b66a57847e6f8d386f" kindref="member">cbor_isa_uint</ref>(item)<sp/>||<sp/><ref refid="common_8c_1a0ca5042e3807d2cc9c3d40f9266460dd" kindref="member">cbor_isa_negint</ref>(item);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="common_8h_1a5618a3689e31829f4f84da008e20798e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a5618a3689e31829f4f84da008e20798e" kindref="member">cbor_is_bool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a983dec76e934c49ed6979226f9db4386" kindref="member">cbor_isa_float_ctrl</ref>(item)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="floats__ctrls_8c_1a9d15faa0a33797ce0b8a1a66d5773d88" kindref="member">cbor_ctrl_value</ref>(item)<sp/>==<sp/><ref refid="data_8h_1a6454b577999b479ac2585af7c204ae3babbcec81d7145fdf31329e07a0bb064bd" kindref="member">CBOR_CTRL_FALSE</ref><sp/>||<sp/><ref refid="floats__ctrls_8c_1a9d15faa0a33797ce0b8a1a66d5773d88" kindref="member">cbor_ctrl_value</ref>(item)<sp/>==<sp/><ref refid="data_8h_1a6454b577999b479ac2585af7c204ae3baf4f149be1611cec155482645ff2be8de" kindref="member">CBOR_CTRL_TRUE</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="common_8h_1ad1f5efac647b4d9c437c4441d1177e01" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1ad1f5efac647b4d9c437c4441d1177e01" kindref="member">cbor_is_null</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a983dec76e934c49ed6979226f9db4386" kindref="member">cbor_isa_float_ctrl</ref>(item)<sp/>&amp;&amp;<sp/><ref refid="floats__ctrls_8c_1a9d15faa0a33797ce0b8a1a66d5773d88" kindref="member">cbor_ctrl_value</ref>(item)<sp/>==<sp/><ref refid="data_8h_1a6454b577999b479ac2585af7c204ae3ba64e142780db46497df37d5cfb40ef8fd" kindref="member">CBOR_CTRL_NULL</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="common_8h_1afb7eb76a2953224c96d194640f3092e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1afb7eb76a2953224c96d194640f3092e3" kindref="member">cbor_is_undef</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a983dec76e934c49ed6979226f9db4386" kindref="member">cbor_isa_float_ctrl</ref>(item)<sp/>&amp;&amp;<sp/><ref refid="floats__ctrls_8c_1a9d15faa0a33797ce0b8a1a66d5773d88" kindref="member">cbor_ctrl_value</ref>(item)<sp/>==<sp/><ref refid="data_8h_1a6454b577999b479ac2585af7c204ae3ba5354f70478e0acf68bf1682229b05b6d" kindref="member">CBOR_CTRL_UNDEF</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="common_8h_1a4dde28c548375aa954f1cad15b3739aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a4dde28c548375aa954f1cad15b3739aa" kindref="member">cbor_is_float</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a983dec76e934c49ed6979226f9db4386" kindref="member">cbor_isa_float_ctrl</ref>(item)<sp/>&amp;&amp;<sp/>!<ref refid="floats__ctrls_8c_1a2b304df65e44de17064bc3de154522fa" kindref="member">cbor_float_ctrl_is_ctrl</ref>(item);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="common_8h_1aa62e72f275c2f0fa604896bfed18e992" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/><ref refid="common_8c_1aa62e72f275c2f0fa604896bfed18e992" kindref="member">cbor_incref</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref>++;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="common_8h_1aa10ebec46eddc9312ec46a0898b5d196" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**item_ref)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item<sp/>=<sp/>*item_ref;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--item-&gt;<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="structcbor__item__t_1a6743a75cf89e1b455ddf3198ff98842a" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a2137d55d8028e37ff4319a633ef0634f" kindref="member">CBOR_TYPE_UINT</ref>:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fallthrough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae140516103af792c8f2af84390acfdcd" kindref="member">CBOR_TYPE_NEGINT</ref>:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Combined<sp/>allocation,<sp/>freeing<sp/>the<sp/>item<sp/>suffices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a70b9f0b5958c8d51f15ad7bb7c4af01d" kindref="member">CBOR_TYPE_BYTESTRING</ref>:<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="bytestrings_8c_1a368222dbbcea25e06469524e26587e2a" kindref="member">cbor_bytestring_is_definite</ref>(item))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>decref<sp/>all<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**handle<sp/>=<sp/><ref refid="bytestrings_8c_1a8ab6255d6f8f209149bdf794dffed849" kindref="member">cbor_bytestring_chunks_handle</ref>(item);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="bytestrings_8c_1ad02102832d452fd5a5cfa96272b1095d" kindref="member">cbor_bytestring_chunk_count</ref>(item);<sp/>i++)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(&amp;handle[i]);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref><sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>)-&gt;chunks);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae05102a66420250eacd5f17b95d04443" kindref="member">CBOR_TYPE_STRING</ref>:<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="strings_8c_1aa2778891e70dec4cd59c9a969294d4aa" kindref="member">cbor_string_is_definite</ref>(item))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>to<sp/>decref<sp/>all<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**handle<sp/>=<sp/><ref refid="strings_8c_1a81d1160eed81b2a29b6c5e9ff6b9e02a" kindref="member">cbor_string_chunks_handle</ref>(item);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="strings_8c_1ad8062db21711a51ae520cc1e4f5fe5ab" kindref="member">cbor_string_chunk_count</ref>(item);<sp/>i++)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(&amp;handle[i]);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref><sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>)-&gt;chunks);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6ae48b04b3538ade49d7eae9ee6b656103" kindref="member">CBOR_TYPE_ARRAY</ref>:<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>all<sp/>items<sp/>and<sp/>decref<sp/>them<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**handle<sp/>=<sp/><ref refid="arrays_8c_1a8dd01f4a46f162fa4f06b7df7428128e" kindref="member">cbor_array_handle</ref>(item);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/><ref refid="arrays_8c_1a4f634a9a4bc834e4ea6ac43e94d51f84" kindref="member">cbor_array_size</ref>(item);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle[i]<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(&amp;handle[i]);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a057fc3133cb4465f9eb734acfd195db2" kindref="member">CBOR_TYPE_MAP</ref>:<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcbor__pair" kindref="compound">cbor_pair</ref><sp/>*handle<sp/>=<sp/><ref refid="maps_8c_1a4cadc8eb7ae7ff8d3f73482fb24455c9" kindref="member">cbor_map_handle</ref>(item);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>item-&gt;<ref refid="structcbor__item__t_1a7d97fa5cdf027ca0499c37ec19acf843" kindref="member">metadata</ref>.<ref refid="unioncbor__item__metadata_1ac497580bfcb0c0e47438a45407ac7b4e" kindref="member">map_metadata</ref>.<ref refid="struct__cbor__map__metadata_1a38136af91105ba320f1d95a4a4ceb4de" kindref="member">end_ptr</ref>;<sp/>i++,<sp/>handle++)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(&amp;handle-&gt;<ref refid="structcbor__pair_1a5122c22ad7ef32b2c6ae0a413caca7a1" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle-&gt;<ref refid="structcbor__pair_1a44bbea9cc120de72fc4871a05dc8ec85" kindref="member">value</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(&amp;handle-&gt;<ref refid="structcbor__pair_1a44bbea9cc120de72fc4871a05dc8ec85" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a16f0eaf29eeea66fe37ec1ed0fa45415" kindref="member">CBOR_TYPE_TAG</ref>:<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;<ref refid="structcbor__item__t_1a7d97fa5cdf027ca0499c37ec19acf843" kindref="member">metadata</ref>.<ref refid="unioncbor__item__metadata_1a7cf72d7dbb3104bd14d0e4934646212f" kindref="member">tag_metadata</ref>.<ref refid="struct__cbor__tag__metadata_1ae275f5a8e0a72192d393f770db923907" kindref="member">tagged_item</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(&amp;item-&gt;<ref refid="structcbor__item__t_1a7d97fa5cdf027ca0499c37ec19acf843" kindref="member">metadata</ref>.<ref refid="unioncbor__item__metadata_1a7cf72d7dbb3104bd14d0e4934646212f" kindref="member">tag_metadata</ref>.<ref refid="struct__cbor__tag__metadata_1ae275f5a8e0a72192d393f770db923907" kindref="member">tagged_item</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a1276dcc4ac56df5fd7e0270344a6e57d" kindref="member">CBOR_TYPE_FLOAT_CTRL</ref>:<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Floats<sp/>have<sp/>combined<sp/>allocation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1300043d7db8adf6ab67f7b787f14635" kindref="member">_CBOR_FREE</ref>(item);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*item_ref<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="common_8h_1a4ed20937cc091bc1f481d53787fe306b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a4ed20937cc091bc1f481d53787fe306b" kindref="member">cbor_intermediate_decref</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="common_8c_1aedbe700f2241de4282aedaae017e0de9" kindref="member">cbor_decref</ref>(&amp;item);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="common_8h_1ab27dda20ad909cebaee1b2f43e676f2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="common_8c_1ab27dda20ad909cebaee1b2f43e676f2c" kindref="member">cbor_refcount</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="common_8h_1a327dce45c1cb680953555290dba8e35b" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/><ref refid="common_8c_1a327dce45c1cb680953555290dba8e35b" kindref="member">cbor_move</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref>--;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pjk/project/libcbor/src/cbor/common.c"/>
  </compounddef>
</doxygen>
