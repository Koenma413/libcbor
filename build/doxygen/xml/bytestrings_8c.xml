<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="bytestrings_8c" kind="file">
    <compoundname>bytestrings.c</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="bytestrings_8h" local="yes">bytestrings.h</includes>
    <incdepgraph>
      <node id="89">
        <label>stdbool.h</label>
      </node>
      <node id="90">
        <label>assert.h</label>
      </node>
      <node id="88">
        <label>stdint.h</label>
      </node>
      <node id="86">
        <label>stdlib.h</label>
      </node>
      <node id="85">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>stddef.h</label>
      </node>
      <node id="83">
        <label>string.h</label>
      </node>
      <node id="91">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>src/cbor/bytestrings.c</label>
        <link refid="bytestrings.c"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>bytestrings.h</label>
        <link refid="bytestrings_8h"/>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="bytestrings_8c_1a7c15a63fdc3830707eac0877a261f1cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_bytestring_length</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_length</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns the length of the binary data. </para>        </briefdescription>
        <detaileddescription>
<para>For definite byte strings only</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a definite bytestring </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the binary data. Zero if no chunk has been attached yet </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="11" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a2c9d6feda3d0f87782168fa817f83be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char* cbor_bytestring_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the handle to the binary data. </para>        </briefdescription>
        <detaileddescription>
<para>Definite items only. Modifying the data is allowed. In that case, the caller takes responsibility for the effect on items this item might be a part of</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The address of the binary data. <computeroutput>NULL</computeroutput> if no data have been assigned yet. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="17" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a368222dbbcea25e06469524e26587e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_bytestring_is_definite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_is_definite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the byte string definite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the byte string definite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="23" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a3a6c450f105bb18b6b56d20f0de4786a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_bytestring_is_indefinite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_is_indefinite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the byte string indefinite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the byte string indefinite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="29" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a86fc646f4520b90c85a704d27b46e69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_definite_bytestring</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_definite_bytestring</name>
        <briefdescription>
<para>Creates a new definite byte string. </para>        </briefdescription>
        <detaileddescription>
<para>The handle is initialized to <computeroutput>NULL</computeroutput> and length to 0</para><para><simplesect kind="return"><para><bold>new</bold> definite bytestring. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="34" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="34" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a6de9d6387e856c33d2ef8e8e9fdac0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_indefinite_bytestring</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_indefinite_bytestring</name>
        <briefdescription>
<para>Creates a new indefinite byte string. </para>        </briefdescription>
        <detaileddescription>
<para>The chunks array is initialized to <computeroutput>NULL</computeroutput> and chunkcount to 0</para><para><simplesect kind="return"><para><bold>new</bold> indefinite bytestring. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="45" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="45" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1ab76bd5ff62831739cd9a8d7ec2768c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_bytestring</definition>
        <argsstring>(cbor_data handle, size_t length)</argsstring>
        <name>cbor_build_bytestring</name>
        <param>
          <type><ref refid="data_8h_1a121c5944682215e742475f12f07c0a72" kindref="member">cbor_data</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Creates a new byte string and initializes it. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>handle</computeroutput> will be copied to a newly allocated block</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Block of binary data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>data</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <bold>new</bold> byte string with content <computeroutput>handle</computeroutput>. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="62" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="62" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a72db2cf518b194c1bca878ad5d4e48a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_bytestring_set_handle</definition>
        <argsstring>(cbor_item_t *item, unsigned char *restrict data, size_t length)</argsstring>
        <name>cbor_bytestring_set_handle</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref> restrict</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the handle to the binary data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite byte string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory block. The caller gives up the ownership of the block. libcbor will deallocate it when appropriate using its free function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="71" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a8ab6255d6f8f209149bdf794dffed849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> **</type>
        <definition>cbor_item_t** cbor_bytestring_chunks_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_chunks_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the handle to the array of chunks. </para>        </briefdescription>
        <detaileddescription>
<para>Manipulations with the memory block (e.g. sorting it) are allowed, but the validity and the number of chunks must be retained.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A indefinite byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>array of <ref refid="bytestrings_8h_1ad02102832d452fd5a5cfa96272b1095d" kindref="member">cbor_bytestring_chunk_count</ref> definite bytestrings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="79" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1ad02102832d452fd5a5cfa96272b1095d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_bytestring_chunk_count</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_bytestring_chunk_count</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the number of chunks this string consist of. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A indefinite bytestring </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The chunk count. 0 for freshly created items. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="86" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="bytestrings_8c_1a5dc8c27d6e7acfdd05fdc15c01e25b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_bytestring_add_chunk</definition>
        <argsstring>(cbor_item_t *item, cbor_item_t *chunk)</argsstring>
        <name>cbor_bytestring_add_chunk</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
<para>Appends a chunk to the bytestring. </para>        </briefdescription>
        <detaileddescription>
<para>Indefinite byte strings only.</para><para>May realloc the chunk storage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An indefinite byte string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite byte string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on realloc failure. In that case, the refcount of <computeroutput>chunk</computeroutput> is not increased and the <computeroutput>item</computeroutput> is left intact. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c" line="94" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/bytestrings.c" bodystart="94" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pavel<sp/>Kalvoda<sp/>&lt;me@pavelkalvoda.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libcbor<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bytestrings_8h" kindref="compound">bytestrings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="bytestrings_8h_1a7c15a63fdc3830707eac0877a261f1cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8c_1a7c15a63fdc3830707eac0877a261f1cd" kindref="member">cbor_bytestring_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(item));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a7d97fa5cdf027ca0499c37ec19acf843" kindref="member">metadata</ref>.<ref refid="unioncbor__item__metadata_1a90851d347147760c9cef8d7af485d006" kindref="member">bytestring_metadata</ref>.<ref refid="struct__cbor__bytestring__metadata_1ad20fa7f7cec11db8076419169347ff75" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="bytestrings_8h_1a05c09e147b0a244abc481b0b078ebcb9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="bytestrings_8c_1a2c9d6feda3d0f87782168fa817f83be6" kindref="member">cbor_bytestring_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(item));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="bytestrings_8h_1a368222dbbcea25e06469524e26587e2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8c_1a368222dbbcea25e06469524e26587e2a" kindref="member">cbor_bytestring_is_definite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(item));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="structcbor__item__t_1a7d97fa5cdf027ca0499c37ec19acf843" kindref="member">metadata</ref>.<ref refid="unioncbor__item__metadata_1a90851d347147760c9cef8d7af485d006" kindref="member">bytestring_metadata</ref>.<ref refid="struct__cbor__bytestring__metadata_1ab43be7eca10ef7f0501d9f87482e27c3" kindref="member">type</ref><sp/>==<sp/><ref refid="data_8h_1a3cdab5e05cf46846e98b43cf77985589a051b0d1fe7ef7ccfc3824110b797429e" kindref="member">_CBOR_METADATA_DEFINITE</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="bytestrings_8h_1a3a6c450f105bb18b6b56d20f0de4786a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8c_1a3a6c450f105bb18b6b56d20f0de4786a" kindref="member">cbor_bytestring_is_indefinite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="bytestrings_8c_1a368222dbbcea25e06469524e26587e2a" kindref="member">cbor_bytestring_is_definite</ref>(item);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="bytestrings_8h_1a86fc646f4520b90c85a704d27b46e69e" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="bytestrings_8c_1a86fc646f4520b90c85a704d27b46e69e" kindref="member">cbor_new_definite_bytestring</ref>()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>*item<sp/>=<sp/>(<ref refid="data_8h_1afdaa4bcbbdd295d719e39ce0b5519419" kindref="member">cbor_item_t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a70b9f0b5958c8d51f15ad7bb7c4af01d" kindref="member">CBOR_TYPE_BYTESTRING</ref>,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.metadata<sp/>=<sp/>{.bytestring_metadata<sp/>=<sp/>{<ref refid="data_8h_1a3cdab5e05cf46846e98b43cf77985589a051b0d1fe7ef7ccfc3824110b797429e" kindref="member">_CBOR_METADATA_DEFINITE</ref>,<sp/>0}}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="bytestrings_8h_1a6de9d6387e856c33d2ef8e8e9fdac0ac" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="bytestrings_8c_1a6de9d6387e856c33d2ef8e8e9fdac0ac" kindref="member">cbor_new_indefinite_bytestring</ref>()</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref>));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>*item<sp/>=<sp/>(<ref refid="data_8h_1afdaa4bcbbdd295d719e39ce0b5519419" kindref="member">cbor_item_t</ref>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structcbor__item__t_1a6bb24fe655f086c6aa9a66d427e09cca" kindref="member">refcount</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/><ref refid="data_8h_1a3a931b40fc31b51cccfd1bc3dc5fc5d6a70b9f0b5958c8d51f15ad7bb7c4af01d" kindref="member">CBOR_TYPE_BYTESTRING</ref>,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.metadata<sp/>=<sp/>{.bytestring_metadata<sp/>=<sp/>{.type<sp/>=<sp/><ref refid="data_8h_1a3cdab5e05cf46846e98b43cf77985589ae598476995d503b404ccf78c21ab79ef" kindref="member">_CBOR_METADATA_INDEFINITE</ref>,<sp/>.length<sp/>=<sp/>0}},</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref>))</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref><sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>)<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.chunk_count<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.chunk_capacity<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.chunks<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="bytestrings_8h_1ab76bd5ff62831739cd9a8d7ec2768c1a" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="bytestrings_8c_1ab76bd5ff62831739cd9a8d7ec2768c1a" kindref="member">cbor_build_bytestring</ref>(<ref refid="data_8h_1a121c5944682215e742475f12f07c0a72" kindref="member">cbor_data</ref><sp/>handle,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*res<sp/>=<sp/><ref refid="bytestrings_8c_1a86fc646f4520b90c85a704d27b46e69e" kindref="member">cbor_new_definite_bytestring</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>content<sp/>=<sp/><ref refid="common_8h_1a07a781e9212fad361b0f59f7fc921057" kindref="member">_CBOR_MALLOC</ref>(length);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(content,<sp/>handle,<sp/>length);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bytestrings_8c_1a72db2cf518b194c1bca878ad5d4e48a1" kindref="member">cbor_bytestring_set_handle</ref>(res,<sp/>content,<sp/>length);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="bytestrings_8h_1a94278dc5a388031c2805835aef005579" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8c_1a72db2cf518b194c1bca878ad5d4e48a1" kindref="member">cbor_bytestring_set_handle</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>restrict<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(item));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="bytestrings_8c_1a368222dbbcea25e06469524e26587e2a" kindref="member">cbor_bytestring_is_definite</ref>(item));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>item-&gt;<ref refid="structcbor__item__t_1a7d97fa5cdf027ca0499c37ec19acf843" kindref="member">metadata</ref>.<ref refid="unioncbor__item__metadata_1a90851d347147760c9cef8d7af485d006" kindref="member">bytestring_metadata</ref>.<ref refid="struct__cbor__bytestring__metadata_1ad20fa7f7cec11db8076419169347ff75" kindref="member">length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="bytestrings_8h_1a8ab6255d6f8f209149bdf794dffed849" refkind="member"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**<ref refid="bytestrings_8c_1a8ab6255d6f8f209149bdf794dffed849" kindref="member">cbor_bytestring_chunks_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(item));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="bytestrings_8c_1a3a6c450f105bb18b6b56d20f0de4786a" kindref="member">cbor_bytestring_is_indefinite</ref>(item));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref><sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>)-&gt;chunks;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="bytestrings_8h_1ad02102832d452fd5a5cfa96272b1095d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8c_1ad02102832d452fd5a5cfa96272b1095d" kindref="member">cbor_bytestring_chunk_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(item));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="bytestrings_8c_1a3a6c450f105bb18b6b56d20f0de4786a" kindref="member">cbor_bytestring_is_indefinite</ref>(item));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref><sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>)-&gt;chunk_count;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="bytestrings_8h_1a5dc8c27d6e7acfdd05fdc15c01e25b47" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="bytestrings_8c_1a5dc8c27d6e7acfdd05fdc15c01e25b47" kindref="member">cbor_bytestring_add_chunk</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*chunk)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="common_8c_1adedaf37527b8d8261e287a0001e5a190" kindref="member">cbor_isa_bytestring</ref>(item));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="bytestrings_8c_1a3a6c450f105bb18b6b56d20f0de4786a" kindref="member">cbor_bytestring_is_indefinite</ref>(item));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref><sp/>*data<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcbor__indefinite__string__data" kindref="compound">cbor_indefinite_string_data</ref><sp/>*)<sp/>item-&gt;<ref refid="structcbor__item__t_1a5c6dde1dbef5aad748c49786352eef44" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(data-&gt;<ref refid="structcbor__indefinite__string__data_1a86c3abce37287c14985b5f2a0d1935d7" kindref="member">chunk_count</ref><sp/>==<sp/>data-&gt;<ref refid="structcbor__indefinite__string__data_1a4f07710bcaa663d2babf652fc9984412" kindref="member">chunk_capacity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>need<sp/>more<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structcbor__indefinite__string__data_1a4f07710bcaa663d2babf652fc9984412" kindref="member">chunk_capacity</ref><sp/>=<sp/>data-&gt;<ref refid="structcbor__indefinite__string__data_1a4f07710bcaa663d2babf652fc9984412" kindref="member">chunk_capacity</ref><sp/>==<sp/>0<sp/>?<sp/>1<sp/>:<sp/>(size_t)(CBOR_BUFFER_GROWTH<sp/>*<sp/>(data-&gt;<ref refid="structcbor__indefinite__string__data_1a4f07710bcaa663d2babf652fc9984412" kindref="member">chunk_capacity</ref>));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**new_chunks_data<sp/>=</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8h_1a1e39038d9b8e9b3a1e6529c9ff6091b8" kindref="member">_CBOR_REALLOC</ref>(data-&gt;<ref refid="structcbor__indefinite__string__data_1ac34c0d9bd1447f53149878128e19a414" kindref="member">chunks</ref>,<sp/>data-&gt;<ref refid="structcbor__indefinite__string__data_1a4f07710bcaa663d2babf652fc9984412" kindref="member">chunk_capacity</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_chunks_data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structcbor__indefinite__string__data_1ac34c0d9bd1447f53149878128e19a414" kindref="member">chunks</ref><sp/>=<sp/>new_chunks_data;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structcbor__indefinite__string__data_1ac34c0d9bd1447f53149878128e19a414" kindref="member">chunks</ref>[data-&gt;<ref refid="structcbor__indefinite__string__data_1a86c3abce37287c14985b5f2a0d1935d7" kindref="member">chunk_count</ref>++]<sp/>=<sp/><ref refid="common_8c_1aa62e72f275c2f0fa604896bfed18e992" kindref="member">cbor_incref</ref>(chunk);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/pjk/project/libcbor/src/cbor/bytestrings.c"/>
  </compounddef>
</doxygen>
