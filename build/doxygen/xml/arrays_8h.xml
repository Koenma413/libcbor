<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="arrays_8h" kind="file">
    <compoundname>arrays.h</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includedby refid="arrays_8c" local="yes">src/cbor/arrays.c</includedby>
    <includedby refid="common_8c" local="yes">src/cbor/common.c</includedby>
    <includedby refid="builder__callbacks_8c" local="yes">src/cbor/internal/builder_callbacks.c</includedby>
    <includedby refid="serialization_8c" local="yes">src/cbor/serialization.c</includedby>
    <includedby refid="cbor_8h" local="yes">src/cbor.h</includedby>
    <incdepgraph>
      <node id="72">
        <label>stdbool.h</label>
      </node>
      <node id="73">
        <label>assert.h</label>
      </node>
      <node id="71">
        <label>stdint.h</label>
      </node>
      <node id="69">
        <label>stdlib.h</label>
      </node>
      <node id="68">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>stddef.h</label>
      </node>
      <node id="67">
        <label>src/cbor/arrays.h</label>
        <link refid="arrays.h"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="77">
        <label>src/cbor/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="81">
        <label>src/cbor.c</label>
        <link refid="cbor_8c"/>
      </node>
      <node id="80">
        <label>src/cbor.h</label>
        <link refid="cbor_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>src/cbor/arrays.c</label>
        <link refid="arrays_8c"/>
      </node>
      <node id="75">
        <label>src/cbor/arrays.h</label>
        <link refid="arrays.h"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>src/cbor/internal/builder_callbacks.c</label>
        <link refid="builder__callbacks_8c"/>
      </node>
      <node id="79">
        <label>src/cbor/serialization.c</label>
        <link refid="serialization_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="arrays_8h_1a4f634a9a4bc834e4ea6ac43e94d51f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_array_size</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_array_size</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the number of members. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of members </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="22" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1a5da97cca271f81f55809c39fad6078b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_array_allocated</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_array_allocated</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the size of the allocated storage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the allocated storage (number of items) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="29" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1a1573139e26cf5b5acc4b0ed861291069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_array_get</definition>
        <argsstring>(const cbor_item_t *item, size_t index)</argsstring>
        <name>cbor_array_get</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get item by index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>incref</bold> The item, or <computeroutput>NULL</computeroutput> in case of boundary violation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="37" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1a382cc2dc480ebb9c7951eb3235be89b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_array_set</definition>
        <argsstring>(cbor_item_t *item, size_t index, cbor_item_t *value)</argsstring>
        <name>cbor_array_set</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set item by index. </para>        </briefdescription>
        <detaileddescription>
<para>Creating arrays with holes is not possible</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>The item to assign </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on allocation failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="48" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="29" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1a44020515090bbbe91249aff0016ab8e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_array_replace</definition>
        <argsstring>(cbor_item_t *item, size_t index, cbor_item_t *value)</argsstring>
        <name>cbor_array_replace</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Replace item at an index. </para>        </briefdescription>
        <detaileddescription>
<para>The item being replace will be <ref refid="common_8h_1aa10ebec46eddc9312ec46a0898b5d196" kindref="member">cbor_decref</ref> &apos;ed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>The item to assign </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on allocation failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="59" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="41" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1ac2f1480c546a0268e8b046b365e58599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_array_is_definite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_array_is_definite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the array definite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the array definite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="66" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1a291a9f3ff12a2e2c58b2ca8b00280d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_array_is_indefinite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_array_is_indefinite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the array indefinite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the array indefinite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="73" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1a8dd01f4a46f162fa4f06b7df7428128e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> **</type>
        <definition>cbor_item_t** cbor_array_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_array_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the array contents. </para>        </briefdescription>
        <detaileddescription>
<para>The items may be reordered and modified as long as references remain consistent.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="arrays_8h_1a4f634a9a4bc834e4ea6ac43e94d51f84" kindref="member">cbor_array_size</ref> items </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="82" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1a8869f0890cae880934fa793e6ba2bc62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_definite_array</definition>
        <argsstring>(const size_t size)</argsstring>
        <name>cbor_new_definite_array</name>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create new definite array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of slots to preallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> array or <computeroutput>NULL</computeroutput> upon malloc failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="89" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="98" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1aaec916ccc6f19782b6aef5ec1da2cc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_indefinite_array</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_indefinite_array</name>
        <briefdescription>
<para>Create new indefinite array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>new</bold> array or <computeroutput>NULL</computeroutput> upon malloc failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="95" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="129" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="arrays_8h_1abb1c1c9731a2195857dc471f2a6f60f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_array_push</definition>
        <argsstring>(cbor_item_t *array, cbor_item_t *pushee)</argsstring>
        <name>cbor_array_push</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>pushee</declname>
        </param>
        <briefdescription>
<para>Append to the end. </para>        </briefdescription>
        <detaileddescription>
<para>For indefinite items, storage may be realloacted. For definite items, only the preallocated capacity is available.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pushee[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>The item to push </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/arrays.h" line="106" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/arrays.c" bodystart="51" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pavel<sp/>Kalvoda<sp/>&lt;me@pavelkalvoda.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libcbor<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBCBOR_ARRAYS_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LIBCBOR_ARRAYS_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="22"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="arrays_8h_1a4f634a9a4bc834e4ea6ac43e94d51f84" kindref="member">cbor_array_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="arrays_8h_1a5da97cca271f81f55809c39fad6078b0" kindref="member">cbor_array_allocated</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/><ref refid="arrays_8h_1a1573139e26cf5b5acc4b0ed861291069" kindref="member">cbor_array_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="arrays_8h_1a382cc2dc480ebb9c7951eb3235be89b4" kindref="member">cbor_array_set</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>value);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="arrays_8h_1a44020515090bbbe91249aff0016ab8e5" kindref="member">cbor_array_replace</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>value);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="arrays_8h_1ac2f1480c546a0268e8b046b365e58599" kindref="member">cbor_array_is_definite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="arrays_8h_1a291a9f3ff12a2e2c58b2ca8b00280d40" kindref="member">cbor_array_is_indefinite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**<sp/><ref refid="arrays_8h_1a8dd01f4a46f162fa4f06b7df7428128e" kindref="member">cbor_array_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>item);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/><ref refid="arrays_8h_1a8869f0890cae880934fa793e6ba2bc62" kindref="member">cbor_new_definite_array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/><ref refid="arrays_8h_1aaec916ccc6f19782b6aef5ec1da2cc26" kindref="member">cbor_new_indefinite_array</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="arrays_8h_1abb1c1c9731a2195857dc471f2a6f60f5" kindref="member">cbor_array_push</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>array,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<sp/>pushee);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LIBCBOR_ARRAYS_H</highlight></codeline>
    </programlisting>
    <location file="/home/pjk/project/libcbor/src/cbor/arrays.h"/>
  </compounddef>
</doxygen>
