<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="strings_8h" kind="file">
    <compoundname>strings.h</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includedby refid="common_8c" local="yes">src/cbor/common.c</includedby>
    <includedby refid="builder__callbacks_8c" local="yes">src/cbor/internal/builder_callbacks.c</includedby>
    <includedby refid="serialization_8c" local="yes">src/cbor/serialization.c</includedby>
    <includedby refid="strings_8c" local="yes">src/cbor/strings.c</includedby>
    <includedby refid="cbor_8h" local="yes">src/cbor.h</includedby>
    <incdepgraph>
      <node id="531">
        <label>stdbool.h</label>
      </node>
      <node id="532">
        <label>assert.h</label>
      </node>
      <node id="530">
        <label>stdint.h</label>
      </node>
      <node id="528">
        <label>stdlib.h</label>
      </node>
      <node id="527">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="528" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
      </node>
      <node id="526">
        <label>src/cbor/strings.h</label>
        <link refid="strings.h"/>
        <childnode refid="527" relation="include">
        </childnode>
      </node>
      <node id="529">
        <label>stddef.h</label>
      </node>
      <node id="533">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="528" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="535">
        <label>src/cbor/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="538">
        <label>src/cbor/strings.c</label>
        <link refid="strings_8c"/>
      </node>
      <node id="534">
        <label>src/cbor/strings.h</label>
        <link refid="strings.h"/>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
      </node>
      <node id="540">
        <label>src/cbor.c</label>
        <link refid="cbor_8c"/>
      </node>
      <node id="539">
        <label>src/cbor.h</label>
        <link refid="cbor_8h"/>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="536">
        <label>src/cbor/internal/builder_callbacks.c</label>
        <link refid="builder__callbacks_8c"/>
      </node>
      <node id="537">
        <label>src/cbor/serialization.c</label>
        <link refid="serialization_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="strings_8h_1aa0c17825f920ebf122bd7b9abede919f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_string_length</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_string_length</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Returns the length of the underlying string. </para>        </briefdescription>
        <detaileddescription>
<para>For definite strings only</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a definite string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the string. Zero if no chunk has been attached yet </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="30" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a90c1cf7781f7ef1f3549f497abd259ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_string_codepoint_count</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_string_codepoint_count</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>The number of codepoints in this string. </para>        </briefdescription>
        <detaileddescription>
<para>Might differ from length if there are multibyte ones</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of codepoints in this string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="39" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1aa2778891e70dec4cd59c9a969294d4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_string_is_definite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_string_is_definite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the string definite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the string definite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="46" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1aa1a92438a04ae77beea9a17910805530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_string_is_indefinite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_string_is_indefinite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is the string indefinite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>a string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is the string indefinite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="53" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1af12871b50ba25f756fa1bfacd1fca12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref></type>
        <definition>cbor_mutable_data cbor_string_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_string_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the handle to the underlying string. </para>        </briefdescription>
        <detaileddescription>
<para>Definite items only. Modifying the data is allowed. In that case, the caller takes responsibility for the effect on items this item might be a part of</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The address of the underlying string. <computeroutput>NULL</computeroutput> if no data have been assigned yet. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="63" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a63144f38c51889b0aad8e8b7f5ed9fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cbor_string_set_handle</definition>
        <argsstring>(cbor_item_t *item, cbor_mutable_data restrict data, size_t length)</argsstring>
        <name>cbor_string_set_handle</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref> restrict</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Set the handle to the underlying string. </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>embed:rst:leading-asterisk
* .. warning:: Using a pointer to a stack allocated constant is a common mistake. Lifetime of the string will expire when it goes out of scope and the CBOR item will be left inconsistent.
* </verbatim></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory block. The caller gives up the ownership of the block. libcbor will deallocate it when appropriate using its free function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="76" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a81d1160eed81b2a29b6c5e9ff6b9e02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> **</type>
        <definition>cbor_item_t** cbor_string_chunks_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_string_chunks_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the handle to the array of chunks. </para>        </briefdescription>
        <detaileddescription>
<para>Manipulations with the memory block (e.g. sorting it) are allowed, but the validity and the number of chunks must be retained.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A indefinite string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>array of <ref refid="strings_8h_1ad8062db21711a51ae520cc1e4f5fe5ab" kindref="member">cbor_string_chunk_count</ref> definite strings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="85" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1ad8062db21711a51ae520cc1e4f5fe5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_string_chunk_count</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_string_chunk_count</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the number of chunks this string consist of. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A indefinite string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The chunk count. 0 for freshly created items. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="92" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a634462c7237298a196413cd62d7d1877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_string_add_chunk</definition>
        <argsstring>(cbor_item_t *item, cbor_item_t *chunk)</argsstring>
        <name>cbor_string_add_chunk</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
<para>Appends a chunk to the string. </para>        </briefdescription>
        <detaileddescription>
<para>Indefinite strings only.</para><para>May realloc the chunk storage.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>An indefinite string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>A definite string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success. false on realloc failure. In that case, the refcount of <computeroutput>chunk</computeroutput> is not increased and the <computeroutput>item</computeroutput> is left intact. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="104" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="81" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a6e2516983e412b9d22fd1fccbeded632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_definite_string</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_definite_string</name>
        <briefdescription>
<para>Creates a new definite string. </para>        </briefdescription>
        <detaileddescription>
<para>The handle is initialized to <computeroutput>NULL</computeroutput> and length to 0</para><para><simplesect kind="return"><para><bold>new</bold> definite string. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="112" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="11" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a226f91c7bfd6be9b0a52cdc6f0b17741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_indefinite_string</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_indefinite_string</name>
        <briefdescription>
<para>Creates a new indefinite string. </para>        </briefdescription>
        <detaileddescription>
<para>The chunks array is initialized to <computeroutput>NULL</computeroutput> and chunkcount to 0</para><para><simplesect kind="return"><para><bold>new</bold> indefinite string. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="120" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="22" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a61a9388aca4fc7ee5355eb92a6d56536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_string</definition>
        <argsstring>(const char *val)</argsstring>
        <name>cbor_build_string</name>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Creates a new string and initializes it. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>val</computeroutput> will be copied to a newly allocated block</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated UTF-8 string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <bold>new</bold> string with content <computeroutput>handle</computeroutput>. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="129" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="strings_8h_1a26f8c53bb33641408921c388bf539b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_build_stringn</definition>
        <argsstring>(const char *val, size_t length)</argsstring>
        <name>cbor_build_stringn</name>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Creates a new string and initializes it. </para>        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>handle</computeroutput> will be copied to a newly allocated block</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A UTF-8 string, at least <computeroutput>length</computeroutput> long (excluding the null byte) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <bold>new</bold> string with content <computeroutput>handle</computeroutput>. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/strings.h" line="138" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/strings.c" bodystart="49" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pavel<sp/>Kalvoda<sp/>&lt;me@pavelkalvoda.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libcbor<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBCBOR_STRINGS_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LIBCBOR_STRINGS_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>============================================================================</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>String<sp/>manipulation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>============================================================================</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="strings_8h_1aa0c17825f920ebf122bd7b9abede919f" kindref="member">cbor_string_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="strings_8h_1a90c1cf7781f7ef1f3549f497abd259ef" kindref="member">cbor_string_codepoint_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="strings_8h_1aa2778891e70dec4cd59c9a969294d4aa" kindref="member">cbor_string_is_definite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="strings_8h_1aa1a92438a04ae77beea9a17910805530" kindref="member">cbor_string_is_indefinite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref><sp/><ref refid="strings_8h_1af12871b50ba25f756fa1bfacd1fca12a" kindref="member">cbor_string_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="strings_8h_1a63144f38c51889b0aad8e8b7f5ed9fc9" kindref="member">cbor_string_set_handle</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/><ref refid="data_8h_1aabb40e458ece40477e134a69c76693e8" kindref="member">cbor_mutable_data</ref><sp/>restrict<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>**<ref refid="strings_8h_1a81d1160eed81b2a29b6c5e9ff6b9e02a" kindref="member">cbor_string_chunks_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="strings_8h_1ad8062db21711a51ae520cc1e4f5fe5ab" kindref="member">cbor_string_chunk_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="strings_8h_1a634462c7237298a196413cd62d7d1877" kindref="member">cbor_string_add_chunk</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*chunk);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="strings_8h_1a6e2516983e412b9d22fd1fccbeded632" kindref="member">cbor_new_definite_string</ref>();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="strings_8h_1a226f91c7bfd6be9b0a52cdc6f0b17741" kindref="member">cbor_new_indefinite_string</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="strings_8h_1a61a9388aca4fc7ee5355eb92a6d56536" kindref="member">cbor_build_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="strings_8h_1a26f8c53bb33641408921c388bf539b0c" kindref="member">cbor_build_stringn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*val,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LIBCBOR_STRINGS_H</highlight></codeline>
    </programlisting>
    <location file="/home/pjk/project/libcbor/src/cbor/strings.h"/>
  </compounddef>
</doxygen>
