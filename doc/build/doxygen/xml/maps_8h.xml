<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="maps_8h" kind="file">
    <compoundname>maps.h</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includedby refid="common_8c" local="yes">src/cbor/common.c</includedby>
    <includedby refid="builder__callbacks_8c" local="yes">src/cbor/internal/builder_callbacks.c</includedby>
    <includedby refid="maps_8c" local="yes">src/cbor/maps.c</includedby>
    <includedby refid="serialization_8c" local="yes">src/cbor/serialization.c</includedby>
    <includedby refid="cbor_8h" local="yes">src/cbor.h</includedby>
    <incdepgraph>
      <node id="449">
        <label>stdbool.h</label>
      </node>
      <node id="450">
        <label>assert.h</label>
      </node>
      <node id="448">
        <label>stdint.h</label>
      </node>
      <node id="446">
        <label>stdlib.h</label>
      </node>
      <node id="445">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
      </node>
      <node id="447">
        <label>stddef.h</label>
      </node>
      <node id="444">
        <label>src/cbor/maps.h</label>
        <link refid="maps.h"/>
        <childnode refid="445" relation="include">
        </childnode>
      </node>
      <node id="451">
        <label>data.h</label>
        <link refid="data_8h"/>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="453">
        <label>src/cbor/common.c</label>
        <link refid="common_8c"/>
      </node>
      <node id="458">
        <label>src/cbor.c</label>
        <link refid="cbor_8c"/>
      </node>
      <node id="457">
        <label>src/cbor.h</label>
        <link refid="cbor_8h"/>
        <childnode refid="458" relation="include">
        </childnode>
      </node>
      <node id="455">
        <label>src/cbor/maps.c</label>
        <link refid="maps_8c"/>
      </node>
      <node id="452">
        <label>src/cbor/maps.h</label>
        <link refid="maps.h"/>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
      <node id="454">
        <label>src/cbor/internal/builder_callbacks.c</label>
        <link refid="builder__callbacks_8c"/>
      </node>
      <node id="456">
        <label>src/cbor/serialization.c</label>
        <link refid="serialization_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="maps_8h_1a1bbbee9c6f1eaa0ff4c19559fe109baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_map_size</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_map_size</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the number of pairs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of pairs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="28" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1a3bf8e5779a3f1311b9b3f9e0a4e4f37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cbor_map_allocated</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_map_allocated</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the size of the allocated storage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Allocated storage size (as the number of <ref refid="structcbor__pair" kindref="compound">cbor_pair</ref> items) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="35" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1aae37d4a288adc4366d560cb72dd3bf48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_definite_map</definition>
        <argsstring>(const size_t size)</argsstring>
        <name>cbor_new_definite_map</name>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create a new definite map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of slots to preallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> definite map. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="42" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="22" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1a58ac69227f48815754651e93d15a5051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
        <definition>cbor_item_t* cbor_new_indefinite_map</definition>
        <argsstring>()</argsstring>
        <name>cbor_new_indefinite_map</name>
        <briefdescription>
<para>Create a new indefinite map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of slots to preallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>new</bold> definite map. <computeroutput>NULL</computeroutput> on malloc failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="49" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="44" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1af077a30d8258ab02307c24af28036fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_map_add</definition>
        <argsstring>(cbor_item_t *item, struct cbor_pair pair)</argsstring>
        <name>cbor_map_add</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>struct <ref refid="structcbor__pair" kindref="compound">cbor_pair</ref></type>
          <declname>pair</declname>
        </param>
        <briefdescription>
<para>Add a pair to the map. </para>        </briefdescription>
        <detaileddescription>
<para>For definite maps, items can only be added to the preallocated space. For indefinite maps, the storage will be expanded as needed</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pair[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>The key-value pair to add (incref is member-wise) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> if either reallocation failed or the preallcoated storage is full </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="60" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="107" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1a64c91e7ecba7cf7d0d4949153d681db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _cbor_map_add_key</definition>
        <argsstring>(cbor_item_t *item, cbor_item_t *key)</argsstring>
        <name>_cbor_map_add_key</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Add a key to the map. </para>        </briefdescription>
        <detaileddescription>
<para>Sets the value to <computeroutput>NULL</computeroutput>. Internal API.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>The key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> if either reallocation failed or the preallcoated storage is full </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="70" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="64" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1abb15486eebcd1c41c373613757505705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _cbor_map_add_value</definition>
        <argsstring>(cbor_item_t *item, cbor_item_t *value)</argsstring>
        <name>_cbor_map_add_value</name>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add a value to the map. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes that <ref refid="maps_8h_1a64c91e7ecba7cf7d0d4949153d681db8" kindref="member">_cbor_map_add_key</ref> has been called. Internal API.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key[incref]</parametername>
</parameternamelist>
<parameterdescription>
<para>The value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> if either reallocation failed or the preallcoated storage is full </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="80" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="95" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1a0dccaa76ac293bb5a11dbca6d16f6253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_map_is_definite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_map_is_definite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is this map definite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is this map definite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="87" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1a941462383a3c8a6e3a60be9778cd1913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cbor_map_is_indefinite</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_map_is_indefinite</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Is this map indefinite? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Is this map indefinite? </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="94" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="maps_8h_1a4cadc8eb7ae7ff8d3f73482fb24455c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structcbor__pair" kindref="compound">cbor_pair</ref> *</type>
        <definition>struct cbor_pair* cbor_map_handle</definition>
        <argsstring>(const cbor_item_t *item)</argsstring>
        <name>cbor_map_handle</name>
        <param>
          <type>const <ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref> *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Get the pairs storage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item[borrow]</parametername>
</parameternamelist>
<parameterdescription>
<para>A map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of <ref refid="maps_8h_1a1bbbee9c6f1eaa0ff4c19559fe109baf" kindref="member">cbor_map_size</ref> pairs. Manipulation is possible as long as references remain valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/pjk/project/libcbor/src/cbor/maps.h" line="101" column="1" bodyfile="/home/pjk/project/libcbor/src/cbor/maps.c" bodystart="126" bodyend="130"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pavel<sp/>Kalvoda<sp/>&lt;me@pavelkalvoda.com&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>libcbor<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>MIT<sp/>license.<sp/>See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBCBOR_MAPS_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LIBCBOR_MAPS_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>============================================================================</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>Map<sp/>manipulation</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>============================================================================</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="maps_8h_1a1bbbee9c6f1eaa0ff4c19559fe109baf" kindref="member">cbor_map_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="maps_8h_1a3bf8e5779a3f1311b9b3f9e0a4e4f37e" kindref="member">cbor_map_allocated</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="maps_8h_1aae37d4a288adc4366d560cb72dd3bf48" kindref="member">cbor_new_definite_map</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="maps_8h_1a58ac69227f48815754651e93d15a5051" kindref="member">cbor_new_indefinite_map</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="maps_8h_1af077a30d8258ab02307c24af28036fca" kindref="member">cbor_map_add</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcbor__pair" kindref="compound">cbor_pair</ref><sp/>pair);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="maps_8h_1a64c91e7ecba7cf7d0d4949153d681db8" kindref="member">_cbor_map_add_key</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="structcbor__pair_1a5122c22ad7ef32b2c6ae0a413caca7a1" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="maps_8h_1abb15486eebcd1c41c373613757505705" kindref="member">_cbor_map_add_value</ref>(<ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item,<sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*<ref refid="structcbor__pair_1a44bbea9cc120de72fc4871a05dc8ec85" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="maps_8h_1a0dccaa76ac293bb5a11dbca6d16f6253" kindref="member">cbor_map_is_definite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="maps_8h_1a941462383a3c8a6e3a60be9778cd1913" kindref="member">cbor_map_is_indefinite</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcbor__pair" kindref="compound">cbor_pair</ref><sp/>*<ref refid="maps_8h_1a4cadc8eb7ae7ff8d3f73482fb24455c9" kindref="member">cbor_map_handle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcbor__item__t" kindref="compound">cbor_item_t</ref><sp/>*item);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LIBCBOR_MAPS_H</highlight></codeline>
    </programlisting>
    <location file="/home/pjk/project/libcbor/src/cbor/maps.h"/>
  </compounddef>
</doxygen>
